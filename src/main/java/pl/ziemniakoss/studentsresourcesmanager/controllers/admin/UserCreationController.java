package pl.ziemniakoss.studentsresourcesmanager.controllers.admin;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.parameters.P;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import pl.ziemniakoss.studentsresourcesmanager.CustomUserDetails;
import pl.ziemniakoss.studentsresourcesmanager.models.UserCreationRequest;
import pl.ziemniakoss.studentsresourcesmanager.services.CustomUserDetailsManager;
import pl.ziemniakoss.studentsresourcesmanager.utils.PasswordUtils;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.Collection;
import java.util.stream.Collectors;

/**
 * Kontroler odpowiedzialny za tworzenie użytkowników, zarówno
 * pojedynczo jak i masowo
 */
@Controller
public class UserCreationController {
	private final Logger log = LoggerFactory.getLogger(UserCreationController.class);
	private final CustomUserDetailsManager userDetailsManager;
	private final PasswordUtils passwordUtils;

	public UserCreationController(CustomUserDetailsManager userDetailsManager, PasswordUtils passwordUtils) {
		this.userDetailsManager = userDetailsManager;
		this.passwordUtils = passwordUtils;
	}

	@GetMapping("/res-admin/users/add")
	public String get(Model model) {
		model.addAttribute("userCreationRequest", new UserCreationRequest());
		return "admin_users-add";
	}

	@PostMapping("/res-admin/users/add")
	public String addUser(@Valid @ModelAttribute UserCreationRequest request, Errors errors, Model model) {
		System.out.println(request);
		if (errors.hasErrors()) {
			log.warn("Errors while creating new user: " + errors.getAllErrors().stream()
					.map(e -> e.getDefaultMessage())
					.collect(Collectors.joining(", ")));
			model.addAttribute("errors", errors.getAllErrors().stream().map(e -> e.getDefaultMessage()).collect(Collectors.toList()));
			return "admin_users-add";
		}
		CustomUserDetails newUserDetails = new CustomUserDetails();
		newUserDetails.setEmail(request.getEmail());
		newUserDetails.setName(request.getName());

		Collection<GrantedAuthority> roles = new ArrayList<>(3);
		if (request.isEmployee()) {
			roles.add(new SimpleGrantedAuthority("ROLE_EMPLOYEE"));
		}
		if (request.isStudent()) {
			roles.add(new SimpleGrantedAuthority("ROLE_STUDENT"));
		}
		if (roles.isEmpty()) {
			log.warn("Trying to create user without roles");
			model.addAttribute("errorMessage", "Użytkownik musi mieć co najmniej jedną rolę");
			model.addAttribute("userCreationRequest", request);
			return "admin_users-add";
		}
		newUserDetails.setAuthorities(roles);

		String autoGeneratedPassword = null;
		if (request.getPassword().equals("")) {
			autoGeneratedPassword = passwordUtils.generateRandom();
			newUserDetails.setPassword(autoGeneratedPassword);
		}

		try {
			userDetailsManager.createUser(newUserDetails);
		} catch (IllegalArgumentException e) {
			log.error("Error while creating new user: " + e.getMessage());
			model.addAttribute("errorMessage", e.getMessage());
			model.addAttribute("userCreationRequest", request);
			return "admin_users-add";
		}
		if (autoGeneratedPassword == null) {
			model.addAttribute("successMessage", "Użytkownik utowrzony z hasłem " + newUserDetails.getPassword());
		} else {
			model.addAttribute("successMessage", "Nowy użytkownik utowrzony");
		}
		return "admin_home";
	}

	@GetMapping("/res-admin/users/mass-add")
	public String getMassAdd(Model model) {
		//todo
		return "not-implemented-yet";
	}

	@PostMapping("/res-admin/users/mass-add")
	public String addUsersFromFile() {
		//todo
		return "not-implemented-yet";
	}

}
